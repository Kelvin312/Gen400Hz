;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 28.09.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny85
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <tiny85.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#define MAX_PAUSE 244
;char swap = 0;
;char imax = 0;
;char onwait = 0;
;char waitPause = 0;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0021     #asm("nop")
;PCODE: $0000000D VOL: 0
	nop
;PCODE: $0000000E VOL: 0
; 0000 0022     #asm("nop")
;PCODE: $0000000F VOL: 0
	nop
;PCODE: $00000010 VOL: 0
; 0000 0023     #asm("nop")
;PCODE: $00000011 VOL: 0
	nop
;PCODE: $00000012 VOL: 0
; 0000 0024 
; 0000 0025     if(!imax)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0026     {
; 0000 0027       if(swap)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0028       {
; 0000 0029         PORTB.1 = 1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002A         PORTB.3 = 1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B       }
; 0000 002C       else
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002D       {
; 0000 002E         PORTB.0 = 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002F         PORTB.2 = 1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0030       }
;PCODE: $00000021 VOL: 0
; 0000 0031     }
; 0000 0032     swap ^= 1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0033     if(++waitPause > 10 && OCR0A < MAX_PAUSE){ OCR0A++;  waitPause = 0;}
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0034     // Reinitialize Timer 0 value
; 0000 0035     TCNT0=0x64;   //Частота
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0036 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)
; 0000 003A {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003B     PORTB &= 0xF0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003C     #asm("wdr")
;PCODE: $00000040 VOL: 0
	wdr
;PCODE: $00000041 VOL: 0
; 0000 003D }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 0041 {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0042     if(OCR0A > 0x80) imax = 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0043     //PORTB &= 0xF0;
; 0000 0044 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0049 {
;PCODE: $00000050 VOL: 0
; 0000 004A // Declare your local variables here
; 0000 004B 
; 0000 004C // Crystal Oscillator division factor: 1
; 0000 004D #pragma optsize-
; 0000 004E CLKPR=0x80;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004F CLKPR=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0050 #ifdef _OPTIMIZE_SIZE_
; 0000 0051 #pragma optsize+
; 0000 0052 #endif
; 0000 0053 
; 0000 0054 // Input/Output Ports initialization
; 0000 0055 // Port B initialization
; 0000 0056 // Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0057 // State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0058 PORTB=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0059 DDRB=0x0F;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005A 
; 0000 005B // Timer/Counter 0 initialization
; 0000 005C // Clock source: System Clock
; 0000 005D // Clock value: 125,000 kHz
; 0000 005E // Mode: Normal top=0xFF
; 0000 005F // OC0A output: Disconnected
; 0000 0060 // OC0B output: Disconnected
; 0000 0061 TCCR0A=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0062 TCCR0B=0x03;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0063 TCNT0=0x64;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0064 OCR0A=0x66; //Пауза
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0065 OCR0B=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0066 
; 0000 0067 // Timer/Counter 1 initialization
; 0000 0068 // Clock source: System Clock
; 0000 0069 // Clock value: Timer1 Stopped
; 0000 006A // Mode: Normal top=0xFF
; 0000 006B // OC1A output: Disconnected
; 0000 006C // OC1B output: Disconnected
; 0000 006D // Timer1 Overflow Interrupt: Off
; 0000 006E // Compare A Match Interrupt: Off
; 0000 006F // Compare B Match Interrupt: Off
; 0000 0070 PLLCSR=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0071 
; 0000 0072 TCCR1=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0073 GTCCR=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0074 TCNT1=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0075 OCR1A=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0076 OCR1B=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0077 OCR1C=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0078 
; 0000 0079 // External Interrupt(s) initialization
; 0000 007A // INT0: Off
; 0000 007B // Interrupt on any change on pins PCINT0-5: Off
; 0000 007C GIMSK=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 007D MCUCR=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007E 
; 0000 007F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0080 TIMSK=0x12;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0081 
; 0000 0082 // Universal Serial Interface initialization
; 0000 0083 // Mode: Disabled
; 0000 0084 // Clock source: Register & Counter=no clk.
; 0000 0085 // USI Counter Overflow Interrupt: Off
; 0000 0086 USICR=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0087 
; 0000 0088 // Analog Comparator initialization
; 0000 0089 // Analog Comparator: On
; 0000 008A // The Analog Comparator's positive input is
; 0000 008B // connected to the Bandgap Voltage Reference
; 0000 008C // The Analog Comparator's negative input is
; 0000 008D // connected to the ADC multiplexer
; 0000 008E // Interrupt on Falling Output Edge
; 0000 008F ACSR=0x4A;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0090 ADCSRB=0x40;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0091 ADMUX=0x02;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0092 // Digital input buffer on AIN0: Off
; 0000 0093 // Digital input buffer on AIN1: Off
; 0000 0094 // Digital input buffers on ADC0: On, ADC1: On, ADC2: Off, ADC3: On
; 0000 0095 DIDR0=0x10;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0096 
; 0000 0097 // ADC initialization
; 0000 0098 // ADC disabled
; 0000 0099 ADCSRA=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 009A 
; 0000 009B // Watchdog Timer initialization
; 0000 009C // Watchdog Timer Prescaler: OSC/1024k
; 0000 009D // Watchdog Timer interrupt: Off
; 0000 009E #pragma optsize-
; 0000 009F #asm("wdr")
;PCODE: $00000083 VOL: 0
	wdr
;PCODE: $00000084 VOL: 0
; 0000 00A0 WDTCR=0x39;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A1 WDTCR=0x29;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A2 #ifdef _OPTIMIZE_SIZE_
; 0000 00A3 #pragma optsize+
; 0000 00A4 #endif
; 0000 00A5 
; 0000 00A6 // Global enable interrupts
; 0000 00A7 #asm("sei")
;PCODE: $00000089 VOL: 0
	sei
;PCODE: $0000008A VOL: 0
; 0000 00A8 
; 0000 00A9 while (1)
;PCODE: $0000008B VOL: 0
; 0000 00AA       {
; 0000 00AB       // Place your code here
; 0000 00AC 
; 0000 00AD       }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AE }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
